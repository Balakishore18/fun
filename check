import json
from azure.cosmos import CosmosClient, PartitionKey, exceptions
import os
import glob
from concurrent.futures import ThreadPoolExecutor

class CosmosOperations:

    @staticmethod
    def client_init():
        try:
            with open('/home/azureuser/config.json') as config_file:
                config = json.load(config_file)
                endpoint = config["endpoint"]
                primary_key = config["primary_key"]
                database_name = config["database_name"]
                container_name = config["container_name"]
                client = CosmosClient(endpoint, credential=primary_key)
                return client, database_name, container_name
        except FileNotFoundError:
            print("Error: Config file not found.")
            return None, None, None
        except KeyError:
            print("Error: Missing key in config file.")
            return None, None, None
        except Exception as e:
            print("An unexpected error occurred during client initialization: {}".format(str(e)))
            return None, None, None

    @staticmethod
    def create_database(client, db_name):
        try:
            database = client.create_database(db_name)
            return database
        except exceptions.CosmosHttpResponseError as e:
            if e.status_code == 409:
                return client.get_database_client(db_name)
            else:
                print("An error occurred: {}".format(e.message))
                return None
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))
            return None

    @staticmethod
    def create_container(client, db_name, container_name):
        try:
            database = client.get_database_client(db_name)
            container = database.create_container(id=container_name, partition_key=PartitionKey(path="/partitionkey"), throughput=400)
            return container
        except exceptions.CosmosHttpResponseError as e:
            if e.status_code == 409:
                return database.get_container_client(container_name)
            else:
                print("An error occurred: {}".format(e.message))
                return None
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))
            return None

    @staticmethod
    def read_data(filepath):
        try:
            if os.path.exists(filepath):
                if len(os.listdir(filepath)) == 0:
                    return []
                else:
                    file_pattern = os.path.join(filepath, '*.json')
                    file_list = glob.glob(file_pattern)
                    data = []
                    for file in file_list:
                        with open(file, 'r') as json_file:
                            data.append(json.load(json_file))
                    return data
            else:
                return []
        except json.decoder.JSONDecodeError:
            print("Error: Malformed JSON content.")
            return []
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))
            return []

    @staticmethod
    def insert_data(client, database_name, container_name, items):
        try:
            container = client.get_database_client(database_name).get_container_client(container_name)
            with ThreadPoolExecutor() as executor:
                list(executor.map(container.upsert_item, items))
        except exceptions.CosmosHttpResponseError as e:
            print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))

    @staticmethod
    def update_data(client, database_name, container_name, item):
        try:
            container = client.get_database_client(database_name).get_container_client(container_name)
            query = "SELECT * FROM c WHERE c.id='{}'".format(item['id'])
            existing_items = list(container.query_items(query=query, enable_cross_partition_query=True))
            if len(existing_items) == 1:
                container.replace_item(item=existing_items[0], body=item)
        except exceptions.CosmosHttpResponseError as e:
            print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))

    @staticmethod
    def delete_data(client, database_name, container_name, item_id=None, partition_value=None):
        try:
            container = client.get_database_client(database_name).get_container_client(container_name)
            container.delete_item(item_id, partition_key=partition_value)
        except exceptions.CosmosHttpResponseError as e:
            print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))




from cosmos_operations import CosmosOperations

client, database_name, container_name = CosmosOperations.client_init()

if client and database_name and container_name:
    CosmosOperations.create_database(client, database_name)
    CosmosOperations.create_container(client, database_name, container_name)
    event_data = CosmosOperations.read_data("/home/azureuser/data")
    
    if event_data:
        CosmosOperations.insert_data(client, database_name, container_name, event_data)
    else:
        print("No data found or error reading data.")

    with open('/home/azureuser/config.json') as config_file:
        config = json.load(config_file)
        if "update" in config and config["update"]:
            item_to_update = config["item_to_update"]
            CosmosOperations.update_data(client, database_name, container_name, item_to_update)
        if "delete" in config and config["delete"]:
            item_id_to_delete = config["item_id_to_delete"]
            partition_value_of_item = config["partition_value_of_item"]
            CosmosOperations.delete_data(client, database_name, container_name, item_id_to_delete, partition_value_of_item)
