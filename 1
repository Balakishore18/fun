import json
from azure.cosmos import CosmosClient, PartitionKey, exceptions
import os
import glob

class CosmosOperations:
    
    @staticmethod
    def client_init():
        try:
            with open('config.json') as config_file:
                config = json.load(config_file)
            
            endpoint = config["endpoint"]
            primary_key = config["primary_key"]
            database_name = config["database_name"]
            container_name = config["container_name"]

            client = CosmosClient(endpoint, credential=primary_key)
            return client, database_name, container_name

        except (FileNotFoundError, KeyError, Exception) as e:
            print("Error during client initialization:", str(e))
            return None, None, None

    @staticmethod
    def create_database(client, db_name):
        try:
            database = client.create_database(db_name)
            print('Database created')
            return database

        except exceptions.CosmosHttpResponseError as e:
            if e.status_code == 409:
                print("Database already exists.")
                database = client.get_database_client(db_name)
                return database
            else:
                print("Error:", e.message)
        except Exception as e:
            print("Unexpected error:", str(e))

    @staticmethod
    def create_container(client, db_name, container_name):
        try:
            database = client.get_database_client(db_name)
            container = database.create_container(id=container_name,
                                                  partition_key=PartitionKey(path="/partitionKey"),
                                                  offer_throughput=400)
            print('Container created')
            return container

        except exceptions.CosmosHttpResponseError as e:
            if e.status_code == 409:
                print("Container already exists.")
                container = database.get_container_client(container_name)
                return container
            else:
                print("Error:", e.message)
        except Exception as e:
            print("Unexpected error:", str(e))

    @staticmethod
    def read_data(filepath):
        try:
            if os.path.exists(filepath):
                if len(os.listdir(filepath)) == 0:
                    return "No Files Found in the directory"
                else:
                    json_pattern = os.path.join(filepath,'*.json')
                    file_list = glob.glob(json_pattern)
                    data = []
                    for file in file_list:
                        with open(file, 'r') as json_file:
                            data.append(json.load(json_file))
                    return data
            else:
                return "Directory does not exist."
        except json.JSONDecodeError:
            return "Malformed JSON content."
        except Exception as e:
            return "Unexpected error: " + str(e)

    @staticmethod
    def data_exists(client, database_name, container_name, item):
        container = client.get_database_client(database_name).get_container_client(container_name)
        query = f"SELECT * FROM c WHERE c.id = '{item['id']}'"
        items = list(container.query_items(query=query, enable_cross_partition_query=True))
        return items[0] if items else None

    @staticmethod
    def insert_data(client, database_name, container_name, items):
        container = client.get_database_client(database_name).get_container_client(container_name)
        for item in items:
            existing_data = CosmosOperations.data_exists(client, database_name, container_name, item)
            if existing_data:
                print(f"Item with id {item['id']} already exists. Skipping insertion.")
                continue
            container.upsert_item(item)
        print('Data inserted')

    @staticmethod
    def update_data(client, database_name, container_name, item):
        container = client.get_database_client(database_name).get_container_client(container_name)
        existing_data = CosmosOperations.data_exists(client, database_name, container_name, item)
        if not existing_data:
            print(f"Item with id {item['id']} doesn't exist. Cannot update non-existent data.")
            return
        if existing_data == item:
            print("New data is same as existing data. No update required.")
            return
        container.replace_item(item=existing_data, body=item)
        print('Data updated')

    @staticmethod
    def delete_data(client, database_name, container_name, item_id=None, partition_value=None):
        try:
            container = client.get_database_client(database_name).get_container_client(container_name)
            
            if item_id and partition_value:
                container.delete_item(item_id, partition_key=partition_value)
                print('Data deleted')
            else:
                print("Please provide both item_id and partition_value to delete.")
                
        except exceptions.CosmosHttpResponseError as e:
            print("Error:", e.message)
        except Exception as e:
            print("Unexpected error:", str(e))
