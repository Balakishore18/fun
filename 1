import pandas as pd
import json
import azure.cosmos.cosmos_client as cosmos_client
import azure.cosmos.errors as errors
import azure.cosmos.http_constants as http_constants

# Load config file
with open('config.json') as config_file:
    config = json.load(config_file)

endpoint = config["endpoint"]
primary_key = config["primary_key"]
database_name = "SSDS"
container_name = "EventGridContainer"

class CosmosOperations:
    @staticmethod
    def client_init():
        client = cosmos_client.CosmosClient(endpoint, {'masterKey': primary_key})
        return client

    @staticmethod
    def create_container(client, db_name, container_name):
        database_link = 'dbs/{}'.format(db_name)
        container_definition = {
            'id': container_name,
            'partitionKey': {
                'paths': ['/partitionKey'],
                'kind': 'Hash'
            }
        }
        try:
            container = client.create_container(database_link, container_definition, {'offerThroughput': 400})
            print('Container created')
            return container
        except errors.HTTPFailure as e:
            if e.status_code == http_constants.StatusCodes.CONFLICT:
                container = client.get_container_client(database=database_name, container=container_name)
                return container
            else:
                raise

    @staticmethod
    def insert_data(client, item):
        container_link = 'dbs/{}/colls/{}'.format(database_name, container_name)
        client.upsert_item(container_link, item)
        print('Data inserted')

    @staticmethod
    def query_data(client, query):
        container_link = 'dbs/{}/colls/{}'.format(database_name, container_name)
        items = list(client.query_items(container_link, query, enable_cross_partition_query=True))
        return items

    @staticmethod
    def update_data(client, item):
        container_link = 'dbs/{}/colls/{}'.format(database_name, container_name)
        client.upsert_item(container_link, item)
        print('Data updated')

    @staticmethod
    def delete_data(client, item_id, partition_value):
        container_link = 'dbs/{}/colls/{}'.format(database_name, container_name)
        item_link = '{}/docs/{}'.format(container_link, item_id)
        client.delete_item(item_link, partition_key=partition_value)
        print('Data deleted')

def main():
    with CosmosOperations.client_init() as client:
        # Sample Data
        event_data = {
            "id": "1",
            "app_code": "sample_app",
            "sft_batch_file_name": "batch123",
            "data_time_stamp": "2021-09-14T12:34:56Z",
            "complete_directory_structure": "/path/to/directory",
            "partitionKey": "sample_app"
        }
        
        # Create a container
        CosmosOperations.create_container(client, database_name, container_name)
        
        # Insert data
        CosmosOperations.insert_data(client, event_data)
        
        # Query data
        queried_data = CosmosOperations.query_data(client, "SELECT * FROM c WHERE c.app_code='sample_app'")
        print(queried_data)

        # Update data (modify the event_data dictionary and use upsert to update)
        event_data["sft_batch_file_name"] = "batch124"
        CosmosOperations.update_data(client, event_data)

        # Delete data
        CosmosOperations.delete_data(client, "1", "sample_app")

if __name__ == '__main__':
    main()
