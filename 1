import json
from azure.cosmos import CosmosClient, PartitionKey, exceptions

class CosmosOperations:

    @staticmethod
    def client_init():
        url = "YOUR_COSMOS_DB_ENDPOINT_URL"
        key = "YOUR_COSMOS_DB_PRIMARY_KEY"
        client = CosmosClient(url, credential=key)
        database_name = "YourDatabaseName"
        container_name = "YourContainerName"
        return client, database_name, container_name

    @staticmethod
    def create_database(client, db_name):
        try:
            client.create_database(db_name)
            print(f"Database '{db_name}' created.")
        except exceptions.CosmosResourceExistsError:
            print(f"Database '{db_name}' already exists.")

    @staticmethod
    def create_container(client, db_name, container_name):
        try:
            database = client.get_database_client(db_name)
            database.create_container(id=container_name, partition_key=PartitionKey(path="/partitionKey"))
            print(f"Container '{container_name}' created.")
        except exceptions.CosmosResourceExistsError:
            print(f"Container '{container_name}' already exists.")

    @staticmethod
    def insert_data(client, database_name, container_name, items):
        container = client.get_database_client(database_name).get_container_client(container_name)
        for item in items:
            query = "SELECT * FROM c WHERE c.id='{}'".format(item['id'])
            existing_items = list(container.query_items(query=query, enable_cross_partition_query=True))

            if not existing_items:
                container.upsert_item(item)
                print(f'Data inserted for ID: {item["id"]}')
            else:
                existing_item = existing_items[0]
                if existing_item == item:
                    print(f'Data with ID {item["id"]} already exists and is identical. Skipping insertion.')
                else:
                    print(f'Data with ID {item["id"]} already exists and differs. Consider updating instead.')

    @staticmethod
    def update_data(client, database_name, container_name, item):
        container = client.get_database_client(database_name).get_container_client(container_name)
        query = "SELECT * FROM c WHERE c.id='{}'".format(item['id'])
        items = list(container.query_items(query=query, enable_cross_partition_query=True))

        if len(items) > 0:
            existing_item = items[0]
            if existing_item == item:
                print(f'Data with ID {item["id"]} is already up-to-date. No updates were made.')
            else:
                container.replace_item(item=existing_item, body=item)
                print(f'Data updated for ID: {item["id"]}')
        else:
            print(f'Item with ID {item["id"]} does not exist. Consider inserting instead.')

    @staticmethod
    def delete_data(client, database_name, container_name, item_id=None, partition_value=None):
        container = client.get_database_client(database_name).get_container_client(container_name)
        query = "SELECT * FROM c WHERE c.id='{}'".format(item_id)
        items = list(container.query_items(query=query, enable_cross_partition_query=True))

        if len(items) > 0:
            item = items[0]
            container.delete_item(item, partition_key=partition_value)
            print(f"Item with ID '{item_id}' deleted.")
        else:
            print(f"Item with ID '{item_id}' not found.")

def main():
    client, database_name, container_name = CosmosOperations.client_init()
    CosmosOperations.create_database(client, database_name)
    CosmosOperations.create_container(client, database_name, container_name)

    # Sample data for demonstration
    sample_data = [{
        'id': 'sample_id',
        'partitionKey': 'sample_partition',
        'name': 'John Doe',
        'age': 25,
        'address': '123 Main St'
    }]

    CosmosOperations.insert_data(client, database_name, container_name, sample_data)

    # Example of how to update data
    item_to_update = {
       'id': 'sample_id',
       'partitionKey': 'sample_partition',
       'name': 'John D.',
       'age': 26,
       'address': '456 Secondary St'
    }

    CosmosOperations.update_data(client, database_name, container_name, item_to_update)

    # Uncomment below to test delete
    # CosmosOperations.delete_data(client, database_name, container_name, 'sample_id', 'sample_partition')

if __name__ == '__main__':
    main()
