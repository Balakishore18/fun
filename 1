import json
from azure.cosmos import CosmosClient, PartitionKey, exceptions
import os
import glob

class CosmosOperations:
    @staticmethod
    def client_init(config_file='config.json'):
        with open(config_file) as config_file:
            config = json.load(config_file)

        endpoint = config["endpoint"]
        primary_key = config["primary_key"]
        database_name = config["database_name"]
        container_name = config["container_name"]

        client = CosmosClient(endpoint, credential=primary_key)
        return client, database_name, container_name

    @staticmethod
    def create_database(client, db_name):
        try:
            database = client.create_database(db_name)
            print('Database created')
            return database
        except exceptions.CosmosHttpResponseError as e:
            if e.status_code == 409:
                print('Database already exists.')
                database = client.get_database_client(db_name)
                return database
            else:
                print("Error creating database: {}".format(e.message))
                raise

    @staticmethod
    def create_container(client, db_name, container_name):
        database = client.get_database_client(db_name)

        try:
            container = database.create_container(id=container_name,
                                                  partition_key=PartitionKey(path="/partitionKey"),
                                                  offer_throughput=400)
            print('Container created')
            return container
        except exceptions.CosmosHttpResponseError as e:
            if e.status_code == 409:
                print('Container already exists.')
                container = database.get_container_client(container_name)
                return container
            else:
                print("Error creating container: {}".format(e.message))
                raise

    @staticmethod
    def read_data(filepath):
        if os.path.exists(filepath):
            if len(os.listdir(filepath)) == 0:
                raise Exception("Directory is empty!")
            else:
                json_pattern = os.path.join(filepath, '*.json')
                file_list = glob.glob(json_pattern)
                for file in file_list:
                    with open(file, 'r') as json_file:
                        data = json.load(json_file)
                        return data
        else:
            raise Exception("Directory not found!")

    @staticmethod
    def insert_data(client, database_name, container_name, item):
        container = client.get_database_client(database_name).get_container_client(container_name)
        container.upsert_item(item)
        print('Data inserted')

    @staticmethod
    def query_data(client, database_name, container_name, query):
        container = client.get_database_client(database_name).get_container_client(container_name)
        items = list(container.query_items(query=query, enable_cross_partition_query=True))
        return items

    @staticmethod
    def update_data(client, database_name, container_name, item):
        container = client.get_database_client(database_name).get_container_client(container_name)
        container.upsert_item(item)
        print('Data updated')

    @staticmethod
    def delete_data(client, database_name, container_name, item_id, partition_value):
        container = client.get_database_client(database_name).get_container_client(container_name)
        try:
            container.delete_item(item_id, partition_key=partition_value)
            print('Data deleted')
        except exceptions.CosmosHttpResponseError as e:
            if e.status_code == 404:
                print("Item not found!")
            else:
                print("Error deleting data: {}".format(e.message))
                raise
