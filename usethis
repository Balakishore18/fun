import json
from azure.cosmos import CosmosClient, PartitionKey, exceptions
import os
import glob

class CosmosOperations:

    @staticmethod
    def __init__():
        try:
            with open('/home/azureuser/config.json') as config_file:
                config = json.load(config_file)
                endpoint = config["endpoint"]
                primary_key = config["primary_key"]
                database_name = config["database_name"]
                container_name = config["container_name"]
                client = CosmosClient(endpoint, credential=primary_key)
                return client, database_name, container_name
        except FileNotFoundError:
            print("Error: Config file not found.")
        except KeyError:
            print("Error: Missing key in config file.")
        except Exception as e:
            print("An unexpected error occurred during client initialization: {}".format(str(e)))

    @staticmethod
    def create_database(client, db_name):
        try:
            database = client.create_database(db_name)
            print('Database created')
            return database
        except exceptions.CosmosHttpResponseError as e:
            if e.status_code == 409:
                print('Database already exists.')
                return client.get_database_client(db_name)
            else:
                print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))

    @staticmethod
    def create_container(client, db_name, container_name):
        try:
            database = client.get_database_client(db_name)
            container = database.create_container(id=container_name, partition_key=PartitionKey(path="/partitionkey"), throughput=400)
            print('Container created')
            return container
        except exceptions.CosmosHttpResponseError as e:
            if e.status_code == 409:
                print('Container already exists.')
                return database.get_container_client(container_name)
            else:
                print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))

    @staticmethod
    def read_data(filepath):
        try:
            if os.path.exists(filepath):
                if len(os.listdir(filepath)) == 0:
                    return "No Files Found in the directory"
                else:
                    file_pattern = os.path.join(filepath, '*.json')
                    file_list = glob.glob(file_pattern)
                    data = []
                    for file in file_list:
                        with open(file, 'r') as json_file:
                            data.append(json.load(json_file))
                    return data
            else:
                print("Error: Directory does not exist.")
        except json.decoder.JSONDecodeError:
            print("Error: Malformed JSON content.")
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))

    @staticmethod
    def insert_data(client, database_name, container_name, items):
        try:
            container = client.get_database_client(database_name).get_container_client(container_name)
            for item in items:
                query = "SELECT * FROM c WHERE c.id='{}'".format(item['id'])
                existing_items = list(container.query_items(query=query, enable_cross_partition_query=True))
                if not existing_items:
                    container.upsert_item(item)
                elif existing_items[0] != item:
                    print("Data with ID {} already exists and differs. Consider updating instead.".format(item['id']))
                else:
                    print("Data with ID {} already exists and is identical. Skipping insertion.".format(item['id']))
        except exceptions.CosmosHttpResponseError as e:
            print("An error occurred: {}".format(str(e)))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))

    @staticmethod
    def update_data(client, database_name, container_name, item):
        try:
            container = client.get_database_client(database_name).get_container_client(container_name)
            query = "SELECT * FROM c WHERE c.id='{}'".format(item['id'])
            existing_items = list(container.query_items(query=query, enable_cross_partition_query=True))
            if len(existing_items) == 1:
                if existing_items[0] != item:
                    container.replace_item(item=item['id'], body=item)
                    print("Data updated for ID: {}".format(item['id']))
                else:
                    print("Data with ID {} is identical. No updates were made.".format(item['id']))
            else:
                print("Item with ID {} does not exist. Consider inserting instead.".format(item['id']))
        except exceptions.CosmosHttpResponseError as e:
            print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))

    @staticmethod
    def delete_data(client, database_name, container_name, item_id=None, partition_value=None):
        try:
            if item_id and partition_value:
                container = client.get_database_client(database_name).get_container_client(container_name)
                container.delete_item(item_id, partition_key=partition_value)
                print("Data deleted for ID: {}".format(item_id))
            else:
                print("Please provide both item_id and partition value to delete.")
        except exceptions.CosmosHttpResponseError as e:
            print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))





from write_cosmos import CosmosOperations

# create object of class
cosmos_operations = CosmosOperations()

# To create a database (if not exists)
client, database_name, container_name = CosmosOperations.client_init()

# To create a new container (if not exists)
CosmosOperations.create_database(client, database_name)

# read event_grid data
event_data = CosmosOperations.read_data("/home/azureuser/data")
print(event_data)

# Writing event_grid data to cosmos db
CosmosOperations.insert_data(client, database_name, container_name, event_data)

# Example of how to update data
# CosmosOperations.update_data(client, database_name, container_name, item_to_update)

# To demonstrate delete (You might want to comment this out initially to check inserted & updated data)
# item_id_to_delete = "sample_id"
# partition_value_of_item = "sample_partition"
# CosmosOperations.delete_data(client, database_name, container_name, item_id_to_delete, partition_value_of_item)
