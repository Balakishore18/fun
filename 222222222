import os
import sys
import json
import subprocess
import time
from azure.cosmos import CosmosClient, exceptions

# Global value declarations for constant variables
endpoint = "your_cosmos_db_endpoint"  # Replace with your actual endpoint
primary_key = "your_primary_key"  # Replace with your actual primary key
const_db = "CONSTANT_DATABASE"
const_containerName = "CONSTANT_CONTAINER"

# Create Cosmos client
client = CosmosClient(endpoint, primary_key)

workflow_database = None
workflow_container = None
job_name = None

def get_constant_config_from_cosmosdb():
    # Your existing implementation of the function
    pass

def get_config_from_cosmosdb(config_data):
    # Your existing implementation of the function
    pass

def create_and_run_databricks_job(config_data):
    # Your existing implementation of the function
    pass

def insert_data_into_cosmosdb(job_id):
    # Your existing implementation of the function
    pass

# Function to watch a directory for new files
def watch_directory(directory_to_watch, interval=10):
    print(f"Watching directory: {directory_to_watch} for new files.")
    already_seen = set(os.listdir(directory_to_watch))  # Initialize with the files already present

    while True:
        current_files = set(os.listdir(directory_to_watch))
        new_files = current_files - already_seen
        if new_files:
            print(f"New files detected: {new_files}")
            for file in new_files:
                file_path = os.path.join(directory_to_watch, file)
                print(f"Processing file: {file_path}")
                
                # Run the job processing logic
                config_data = get_constant_config_from_cosmosdb()
                if not config_data:
                    print("Failed to fetch config data from Cosmos DB.")
                    continue  # Skip this file and continue watching

                job_config = get_config_from_cosmosdb(config_data)
                job_id = create_and_run_databricks_job(job_config)
                insert_data_into_cosmosdb(job_id)
                
            already_seen.update(new_files)

        time.sleep(interval)

if __name__ == '__main__':
    # Replace with the actual directory path you want to monitor
    FOLDER_PATH_TO_WATCH = "/path/to/your/watch/folder"  
    watch_directory(FOLDER_PATH_TO_WATCH)
