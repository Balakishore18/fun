# write_cosmos.py

import json
from azure.cosmos import CosmosClient, PartitionKey, exceptions
import os
import glob
from concurrent.futures import ThreadPoolExecutor

class CosmosOperations:

    @staticmethod
    def client_init():
        try:
            with open('config.json') as config_file:
                config = json.load(config_file)
                endpoint = config["endpoint"]
                primary_key = config["primary_key"]
                database_name = config["database_name"]
                container_name = config["container_name"]
                client = CosmosClient(endpoint, credential=primary_key)
                return client, database_name, container_name
        except FileNotFoundError:
            print("Error: Config file not found.")
            return None, None, None
        except KeyError:
            print("Error: Missing key in config file.")
            return None, None, None
        except Exception as e:
            print("An unexpected error occurred during client initialization: {}".format(str(e)))
            return None, None, None

    @staticmethod
    def create_database(client, db_name):
        try:
            database = client.create_database(db_name)
            print('Database created')
            return database
        except exceptions.CosmosHttpResponseError as e:
            if e.status_code == 409:
                print('Database already exists.')
                return client.get_database_client(db_name)
            else:
                print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))

    @staticmethod
    def create_container(client, db_name, container_name):
        try:
            database = client.get_database_client(db_name)
            container = database.create_container(id=container_name, partition_key=PartitionKey(path="/partitionkey"), throughput=400)
            print('Container created')
            return container
        except exceptions.CosmosHttpResponseError as e:
            if e.status_code == 409:
                print('Container already exists.')
                return database.get_container_client(container_name)
            else:
                print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))

    @staticmethod
    def read_data(filepath):
        try:
            if os.path.exists(filepath):
                if len(os.listdir(filepath)) == 0:
                    return "No Files Found in the directory"
                else:
                    file_pattern = os.path.join(filepath, '*.json')
                    file_list = glob.glob(file_pattern)
                    data = []
                    for file in file_list:
                        with open(file, 'r') as json_file:
                            data.append(json.load(json_file))
                    return data
            else:
                print("Error: Directory does not exist.")
                return []
        except json.decoder.JSONDecodeError:
            print("Error: Malformed JSON content.")
            return []
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))
            return []

    @staticmethod
    def insert_data(client, database_name, container_name, items):
        try:
            container = client.get_database_client(database_name).get_container_client(container_name)
            with ThreadPoolExecutor() as executor:
                list(executor.map(container.upsert_item, items))
        except exceptions.CosmosHttpResponseError as e:
            print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(e))

    @staticmethod
    def update_data(client, database_name, container_name, item):
        try:
            container = client.get_database_client(database_name).get_container_client(container_name)
            query = "SELECT * FROM c WHERE c.id='{}'".format(item['id'])
            existing_items = list(container.query_items(query=query, enable_cross_partition_query=True))
            if len(existing_items) == 1:
                if existing_items[0] != item:
                    container.replace_item(item=existing_items[0], body=item)
                    print("Data updated for ID: {}".format(item['id']))
                else:
                    print("Data with ID {} is identical. No updates were made.".format(item['id']))
            else:
                print("Item with ID {} does not exist. Consider inserting instead.".format(item['id']))
        except exceptions.CosmosHttpResponseError as e:
            print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))

    @staticmethod
    def delete_data(client, database_name, container_name, item_id=None, partition_value=None):
        try:
            if item_id and partition_value:
                container = client.get_database_client(database_name).get_container_client(container_name)
                container.delete_item(item_id, partition_key=partition_value)
                print("Data deleted for ID: {}".format(item_id))
            else:
                print("Please provide both item_id and partition value to delete.")
        except exceptions.CosmosHttpResponseError as e:
            print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))



# write_cosmos_check.py

from write_cosmos import CosmosOperations

def main():
    client, database_name, container_name = CosmosOperations.client_init()
    if not client:
        exit("Failed to initialize Cosmos client. Check your config.json and ensure the Cosmos DB service is accessible.")

    CosmosOperations.create_database(client, database_name)
    CosmosOperations.create_container(client, database_name, container_name)

    event_data = CosmosOperations.read_data("/home/azureuser/data")
    if isinstance(event_data, str):
        print(event_data)
    else:
        CosmosOperations.insert_data(client, database_name, container_name, event_data)

    process_config_operations(client, database_name, container_name)

def process_config_operations(client, database_name, container_name):
    import json
    with open('config.json') as config_file:
        config = json.load(config_file)
        if "update" in config and config["update"]["enabled"]:
            item_to_update = config["update"]["item_to_update"]
            if isinstance(item_to_update, list):  # Check if it's a list
                for item in item_to_update:
                    CosmosOperations.update_data(client, database_name, container_name, item)
            else:
                CosmosOperations.update_data(client, database_name, container_name, item_to_update)
        if "delete" in config and config["delete"]["enabled"]:
            item_id_to_delete = config["delete"]["item_id"]
            partition_value_of_item = config["delete"].get("partition_value_of_item", None)
            CosmosOperations.delete_data(client, database_name, container_name, item_id_to_delete, partition_value_of_item)

if __name__ == "__main__":
    main()



{
    "endpoint": "YOUR_COSMOS_DB_ENDPOINT",
    "primary_key": "YOUR_COSMOS_DB_PRIMARY_KEY",
    "database_name": "YOUR_DATABASE_NAME",
    "container_name": "YOUR_CONTAINER_NAME",
    "update": {
        "enabled": true,
        "item_id": "2",
        "new_data_time_stamp": "2023-10-26T12:34:56Z"
    },
    "delete": {
        "enabled": true,
        "item_id": "3"
    }
}



@staticmethod
def update_data(client, database_name, container_name, items):
    container = client.get_database_client(database_name).get_container_client(container_name)

    def update_single_item(item):
        try:
            query = "SELECT * FROM c WHERE c.id='{}'".format(item['id'])
            params = [{'name': '@id', 'value': item['id']}]
            existing_items = list(container.query_items(query=query, parameters=params, enable_cross_partition_query=True))
            
            if len(existing_items) > 0:
                existing_item = existing_items[0]
                
                # Check if the items are different using their serialized form.
                if json.dumps(existing_item, sort_keys=True, default=str) != json.dumps(item, sort_keys=True, default=str):
                    container.replace_item(item=existing_item['id'], body=item)
                    print("Data updated for ID: {}".format(item['id']))
                else:
                    print("Data with ID {} is already up-to-date. No updates were made.".format(item['id']))
            else:
                print("Item with ID {} does not exist. Consider inserting instead.".format(item['id']))
                
        except exceptions.CosmosHttpResponseError as e:
            print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))

    # Process each item in the list
    for item in items:
        update_single_item(item)


def delete_data(client, database_name, container_name, item_id):
        try:
            container = client.get_database_client(database_name).get_container_client(container_name)
            query = "SELECT * FROM c WHERE c.id = @id"
            params = [{'name': '@id', 'value': item_id}]
            existing_items = list(container.query_items(query, parameters=params, enable_cross_partition_query=True))

            if existing_items:
                existing_item = existing_items[0]
                container.delete_item(item=existing_item)
                print(f"Data with ID {item_id} has been deleted.")
            else:
                print(f"Data with ID {item_id} was not found, so no deletion occurred.")
        except exceptions.CosmosHttpResponseError as e:
            print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e))


@staticmethod
def delete(client, database_name, container_name, item_id):
    try:
        container = client.get_database_client(database_name).get_container_client(container_name)

        # Query to get the partition key value
        query = "SELECT * FROM c WHERE c.id = @id"
        params = [{"name": "@id", "value": item_id}]
        items = list(container.query_items(query=query, parameters=params, enable_cross_partition_query=True))
        
        if not items:
            print("Data with ID {} not found.".format(item_id))
            return

        # Extracting partition key value from the item
        partition_key_value = items[0]["partitionKey"]

        # Deleting the item
        response = container.delete_item(item_id, partition_key=partition_key_value)
        if response.status_code == 204:
            print("Data with ID {} has been deleted.".format(item_id))
        else:
            print("Error during deletion. Status code: {}".format(response.status_code))
            
    except exceptions.CosmosHttpResponseError as e:
        print("An error occurred: {}".format(e.message))
    except Exception as e:
        print("An unexpected error occurred: {}".format(str(e)))

@staticmethod
@staticmethod
def delete_data(client, database_name, container_name, delete_data):
    database_client = client.get_database_client(database_name)
    container_client = database_client.get_container_client(container_name)

    try:
        container_client.delete_item(item=delete_data['id'], partition_key=delete_data['partitionKey'])
        print("Item with ID {} and Partition Key {} deleted successfully.".format(delete_data['id'], delete_data['partitionKey']))
    except exceptions.CosmosHttpResponseError as e:
        print("An error occurred: {}".format(e.message))
    except Exception as e:
        print("An unexpected error occurred: {}".format(str(e)))


@staticmethod
def delete_data(client, database_name, container_name, delete_data_info):
    container = client.get_database_client(database_name).get_container_client(container_name)
    for item in delete_data_info:
        id_to_delete = item['id']
        partition_key_value = item['partitionKey']
        try:
            container.delete_item(item, partition_key=partition_key_value)
            print("Data with ID: {} and partitionKey: {} deleted successfully.".format(id_to_delete, partition_key_value))
        except exceptions.CosmosHttpResponseError as e:
            if e.status_code == 404:
                print("Data with ID: {} does not exist.".format(id_to_delete))
            else:
                print("An error occurred: {}".format(e.message))
        except Exception as e:
            print("An unexpected error occurred: {}".format(str(e)))






